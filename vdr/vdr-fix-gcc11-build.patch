commit 48d50efb6a9e95e5b40af5a096fc4a3ed7a48377
Author: Manuel Reimer <manuel.reimer@gmx.de>
Date:   Wed May 19 14:24:21 2021 +0200

    Fix building with GCC 11
    
    With this change it is required that you use DISABLE_TEMPLATES_COLLIDING_WITH_STL before importing tools.h if you use STL

diff --git a/tools.h b/tools.h
index 5d1559a..820e2e5 100644
--- a/tools.h
+++ b/tools.h
@@ -54,16 +54,14 @@ template<class T> inline void DELETENULL(T *&p) { T *q = p; p = NULL; delete q;
 // In case some plugin needs to use the STL and gets an error message regarding one
 // of these functions, you can #define DISABLE_TEMPLATES_COLLIDING_WITH_STL before
 // including tools.h.
-#if !defined(__STL_CONFIG_H) // for old versions of the STL
-#if !defined(DISABLE_TEMPLATES_COLLIDING_WITH_STL) && !defined(_STL_ALGOBASE_H)
+#if !defined(DISABLE_TEMPLATES_COLLIDING_WITH_STL)
 template<class T> inline T min(T a, T b) { return a <= b ? a : b; }
 template<class T> inline T max(T a, T b) { return a >= b ? a : b; }
 #endif
 template<class T> inline int sgn(T a) { return a < 0 ? -1 : a > 0 ? 1 : 0; }
-#if !defined(DISABLE_TEMPLATES_COLLIDING_WITH_STL) && !defined(_MOVE_H)
+#if !defined(DISABLE_TEMPLATES_COLLIDING_WITH_STL)
 template<class T> inline void swap(T &a, T &b) { T t = a; a = b; b = t; }
 #endif
-#endif
 
 template<class T> inline T constrain(T v, T l, T h) { return v < l ? l : v > h ? h : v; }
 
